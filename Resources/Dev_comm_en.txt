	1. When selecting a file, we determine whether it is an ELF (the beginning of the file - binary sequence - 7F 45 4C 46 - ELF). If it is not, we inform the user that the file is not an ELF and terminate the algorithm (this applies to all subsequent checks as well). We check if there are 5 occurrences of ELF in it.
	2. We parse the header of the zero ELF. Class: ELF32 Machine: WE32100 (RISC type) Start of program headers: 0x1C-2-0x34 Header size: 0x28-2-0x34 (52 bytes) Header size: 0x2A-2-0x20 (32 bytes) Number of headers: 0x2C-2-0x02 (2 pcs) Total header + headers = 0x74, which we skip. Analog of zero follows. Address of the first program: 0x38-4-0x74 Size: 0x48-4-0x20000 Address of the second program: 0x58-4-0x20074 Size: 0x68-4-0x280 End of file: 0x202F4
	3. We parse the header of the first ELF. Class: ELF32 Machine: RISC-V Start of program headers: 0x1C-2-0x34 Header size: 0x28-2-0x34 (52 bytes) Header size: 0x2A-2-0x20 (32 bytes) Number of headers: 0x2C-2-0x0D (13 pcs) Total header + headers = 0x1D4 first zero program Address of the last program: 0x34 + 0x20 * 12 + 4 = 0x1B8-4-0x32000 Non-zero size: 0x1C8-4-0x2CA0 End of file: 0x34CA0
	4. We parse the header of the second ELF. Class: ELF64 Machine: AArch64 Start of program headers: 0x20-4-0x40 Header size: 0x34-2-0x40 (64 bytes) Header size: 0x36-2-0x38 (56 bytes) Number of headers: 0x38-2-0x9 (9 pcs) Total header + headers = 0x238 first zero program Address of the last program: 0x40 + 0x38 * 8 + 8 = 0x208-8-0xD0000 Non-zero size: 0x220-8-0x2BE0 End of file: 0xD2BE0
	5. We parse the header of the third ELF. Class: ELF64 Machine: AArch64 Start of program headers: 0x20-4-0x40 Header size: 0x34-2-0x40 (64 bytes) Header size: 0x36-2-0x38 (56 bytes) Number of headers: 0x38-2-0x7 (7 pcs) Total header + headers = 0x1C8 first zero program Address of the last program: 0x40 + 0x38 * 6 + 8 = 0x198-8-0x5B000 Non-zero size: 0x1B0-8-0xFF8 End of file: 0x5BFF8
	6. We parse the header of the fourth ELF. Class: ELF64 Machine: WE32100 (RISC type) Start of program headers: 0x20-4-0x40 Header size: 0x34-2-0x40 (64 bytes) Header size: 0x36-2-0x38 (56 bytes) Number of headers: 0x38-2-0x7 (7 pcs) Total header + headers = 0x1C8 first zero program Address of the last program: 0x40 + 0x38 * 6 + 8 = 0x198-8-0x1E000 Non-zero size: 0x1B0-8-0xFF8 End of file: 0x1EFF8
	10. Using the mask "D00DFEED", we find an occurrence in the device tree.
The first address is 0xCAB0 (this is the fourth program from the header), length 0x361C (13852).
The tree itself is 0x3619 (13849).
	11. We copy the device tree blob:
dd bs=1 count=13849 skip=51888 if=5.elf of=5.dtb
	12. We convert it to text:
dtc -O dts -o 5.dts 5.dtb
	13. We find the list of available processors in the second ELF. For now, using the mask SM_KAILUA.
This is the fourth program, starting at address 0x94000 and with a size of 0x10000.
At address 0x96210, the list of available processors begins (1+24):
UNKNOWN
SM_KAILUA - Snapdragon 8 Gen 1
SMP_KAILUA - Snapdragon 8 Gen 1 (modified version)
SXR_AURORA - Snapdragon 7c
QRU_LASSEN - Snapdragon 8 Gen 2
QDU_LASSEN - Snapdragon 8 Gen 2 (modified version)
QDU1010_LASSEN - Snapdragon 8 Gen 2 (modified version)
QRU1032_LASSEN - Snapdragon 8 Gen 2 (modified version)
QRU1052_LASSEN - Snapdragon 8 Gen 2 (modified version)
QRU1062_LASSEN - Snapdragon 8 Gen 2 (modified version)
SXR_HALLIDAY - Snapdragon 7c Gen 2
SM_LANAI - Snapdragon 7 Gen 1
SMP_LANAI - Snapdragon 7 Gen 1 (modified version)
SCP_HAMOA - Snapdragon 6 Gen 1
SDX_PINNACLES - Snapdragon X55
SDX_PINNACLES_M - Snapdragon X55 (modified version)
SA_PINNACLES - Snapdragon X55 (modified version)
SA_PINNACLES_L - Snapdragon X55 (modified version)
SSG_AURORA - Snapdragon 7c
SM_KAPITI - Snapdragon 8 Gen 1 (modified version)
SDX_KUNO_SINGLEDIE - Snapdragon X60
SDX_KUNO_HYBRID - Snapdragon X60 (hybrid version)
SSG2_AURORA - Snapdragon 7c Gen 2
SG_KAILUA - Snapdragon 8 Gen 1
SGP_KAILUA - Snapdragon 8 Gen 1 (modified version)
	14. For command searching! At address 0x9422B in the same file and program, the JTAG ID, OEM ID, and Serial Number are located. We need to find out what requests pull the data!
	15. We find the hash table and check the integrity of the programmer's data using it.
For the second ELF, the hash table is located in the last (9th) program (start 0xD0000, size 0x2BE0).
p1 - 0xD0200 - 0x30 (header hash)
p2 - 230 (all zeros)
p3 - 260
p4 - 0xD0290 = 0x30 (all zeros)
p5 - 0xD02C0 - 0x30 (48 bytes - 96 characters)
p6 - 0x2F0
p7 - 320 (all zeros)
p8 - 350 (all zeros)
p9 - 0xD0380 - 0x30 (all zeros) - here is the hash table - up to 0xD03B0
	16. Something unclear (104 bytes, 0x68) from 0xD03B0 to the beginning of the certificates (0xD0418).
	17. Probably, the version of the programmer (7) has moved to address 0xD0004.